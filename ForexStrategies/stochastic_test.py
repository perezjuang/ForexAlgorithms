# -*- coding: utf-8 -*-
"""Stochastic Test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VG0s-hKES9nLVK0BDGZr3zDDm2-f1psJ

# Bolly Band
"""

# Commented out IPython magic to ensure Python compatibility.
import fxcmpy
import pandas as pd
import numpy as np
import datetime as dt


from pyti.stochastic import percent_k
from pyti.stochastic import percent_d
import matplotlib.pyplot as plt
# %matplotlib inline
from matplotlib import style
style.use('ggplot')
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

socket = fxcmpy.fxcmpy(config_file = 'fxcm.cfg')

data = socket.get_candles(instrument = 'GBP/USD', period = 'D1', start = dt.datetime(2015,1,1), end = dt.datetime(2018, 6, 10))

data['percent_k'] = percent_k(data['askclose'], 20)
data['percent_d'] = percent_d(data['askclose'], 20)

fig = plt.figure(figsize=(12,8))
ax1 = fig.add_subplot(111,  xlabel = 'Date',ylabel='Close')
data['askclose'].plot(ax=ax1, color='r', lw=1)

ss_plot = plt.figure(figsize=(12,8))
ax3 = ss_plot.add_subplot(111,  ylabel='Percent')
data['percent_k'].plot(ax=ax3, color='r')
data['percent_d'].plot(ax=ax3, color='g')
data['ovr'] = .80
data['ovr'].plot(ax=ax3, color = 'b', )
data['blw'] = .20
data['blw'].plot(ax=ax3, color = 'b',)

data['signal'] = np.where(np.logical_and(data['percent_k'] > data['percent_d'], data['percent_k']>.8),1,0)
data['position'] = data['signal'].diff()
data

pip_cost = .09
lot_size = 100
begin_prices = []
end_prices = []
profits = 0

# Finding when a position is initiated and getting the open / close prices for the position
for i, row in data.iterrows():
    if row['position'] == 1:
        begin_prices.append(float(row['askopen']))
    if row['position'] == -1:
        end_prices.append(float(row['askopen']))

# Calculating the profit / loss using our pip cost and lot size
for i in range(len(begin_prices)):
    profit = (end_prices[i] - begin_prices[i]) * 100 * pip_cost * lot_size
    profits += profit
    print("The return for trade " + str(i + 1) + " is: " + str(int(profit)))
    

print("The return for the period is: " + str(int(profits)))























